#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    $bb chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
cleanup() { rm -rf /tmp/anykernel; }
abort() {
  if [ ! -f /tmp/anykernel/anykernel.sh -o "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    ui_print "$*"; cleanup; umount /system; umount /data; exit 1;
  else
    ui_print "$*"; umount /system; umount /data; exit 1;
  fi;
}

show_progress 1.34 4;
ui_print " ";
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIPFILE";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;

ui_print "$(file_getprop /tmp/anykernel/anykernel.sh kernel.string)";

ui_print " ";
ui_print "=========================================";
ui_print "   Welcome to...                         ";
ui_print "                                         ";
ui_print "  * * * * * * * * * * * * * * * * * * *  ";
ui_print "  *          SimpleGX KERNEL          *  ";
ui_print "  *                for                *  ";
ui_print "  *             OnePlus 5             *  ";
ui_print "  * * * * * * * * * * * * * * * * * * *  ";
ui_print "                                         ";
ui_print "                       ...by AndroidGX   ";
ui_print "=========================================";
ui_print " ";

ui_print "Mounting system..";
ui_print " ";
umount /system 2>/dev/null;
mount -o ro -t auto /system;
mount /data 2>/dev/null;
test -f /system/system/build.prop && root=/system;

ui_print "Verifying device..";
if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
	ui_print "  - Detected product.device: $(getprop ro.product.device)";
	ui_print "  - Detected build.product : $(getprop ro.build.product)";
	ui_print "  - Detected display.series: $(getprop ro.display.series)";

	for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do
		testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
		if [ "$(getprop ro.product.device)" == "$testname" -o \
			"$(getprop ro.build.product)" == "$testname" -o \
			"$(getprop ro.display.series)" == "$testname" ]; then
			match=1;
		fi;
	done;

	if [ "$match" != 1 ]; then
		abort "This kernel is NOT compatible with your device. Aborting.";
	else
		ui_print "  Kernel is compatible.";
	fi;

	ui_print " ";
fi;

ui_print "Installing kernel..";
ui_print " ";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print "Extracting modules..";
  ui_print " ";
  mount -o rw,remount -t auto /system;
  cp -rf /tmp/anykernel/modules/* $root/system/lib/modules/;
  set_perm_recursive 0 0 0755 0644 $root/system/lib/modules;
  mount -o ro,remount -t auto /system;
fi;

case $(basename "$ZIPFILE" .zip) in
  *-debugging)
    ui_print " ";
    ui_print "Creating debugging archive in zip directory...";
    $bb tar -czvf "$DIR/anykernel2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
  ;;
esac;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

ui_print "Unmounting system..";
ui_print " ";
umount /system;
umount /data;
ui_print "       * * * * * * * * * * * * * * *     ";
ui_print "       *           DONE !          *     ";
ui_print "       *     REBOOT AND ENJOY !    *     ";
ui_print "       * * * * * * * * * * * * * * *     ";

